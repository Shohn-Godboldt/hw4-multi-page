---
title: "Hwk_4: Data Manipulation"
author: "Shohn Godboldt"
editor: visual
---

# Load Libraries

```{r}
library(tidyverse)
library(readxl)
```

# Task 1: Conceptual Questions

1.  **If your working directory is `myfolder/homework/`, what relative path would you specify to get the file located at `myfolder/MyData.csv`?**

> ../MyData.csv

2.  **What are the major benefits of using R projects?**

> R Projects provide reproducibility, isolated working environments, Git integration, and simplified relative paths.

3.  **What is git and what is github?**

> Git is a version control system to track code changes. GitHub is an online platform for hosting and collaborating on Git repositories.

4.  **What are the two main differences between a tibble and a data.frame?**

> -   Tibbles don't convert strings to factors automatically\
> -   Tibbles print a cleaner preview with just the first few rows

5.  **Rewrite the nested function using the chaining operator (`%>%`):**

```{r}
as_tibble(iris) %>%
  select(starts_with("Petal"), Species) %>%
  filter(Petal.Length < 1.55) %>%
  arrange(Species)
```

#  Task 2: Reading Delimited Data

## Glass Data

```{r}
# Read glass data from a URL, using commas as delimiters
glass_data <- read_delim(
"https://www4.stat.ncsu.edu/~online/datasets/glass.data",
delim = ",",
col_names = c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type_of_glass")
)

# Recode numeric Type_of_glass into descriptive categories
glass_data <- glass_data %>%
mutate(
Type_of_glass = case_when(
Type_of_glass == 1 ~ "building_windows_float_processed",
Type_of_glass == 2 ~ "building_windows_non_float_processed",
Type_of_glass == 3 ~ "vehicle_windows_float_processed",
Type_of_glass == 5 ~ "containers",
Type_of_glass == 6 ~ "tableware",
Type_of_glass == 7 ~ "headlamps"
)
)

# View transformed data
glass_data
```

## Yeast Data

```{r}
# Read space-delimited yeast data using read_table()
yeast_data <- read_table(
"https://www4.stat.ncsu.edu/~online/datasets/yeast.data",
col_names = c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class")
)

# Summarize mean and median for selected columns, grouped by 'class'
yeast_summary <- yeast_data %>%
select(-seq_name, -nuc) %>% # Remove columns not needed for summary
group_by(class) %>%
summarise(
across(mcg:vac, list(mean = mean, median = median), .names = "{.col}_{.fn}")
)

# View summary statistics
yeast_summary
```

---

# Task 3: Combining Excel and Delimited Data

##  White Wine Data

```{r}
# Read white wine data and add a "type" column
white_wine <- read_excel("white-wine.xlsx", sheet = 1) %>%
mutate(type = "white")
```

##  Red Wine Data

```{r}
# Read red wine data from CSV URL and add "type" column
red_wine <- read_delim(
"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv",
delim = ";"
) %>%
mutate(type = "red")
```

## Combine, Filter, and Summarize

```{r}
# Combine red and white wine datasets into one
combined_wine <- bind_rows(white_wine, red_wine)

# Filter, sort, select, and summarize alcohol values by quality
combined_wine <- combined_wine %>%
filter(quality >= 5, alcohol < 13.2) %>%
arrange(desc(quality)) %>%
select(contains("acid"), alcohol, type, quality) %>%
group_by(quality) %>%
summarise(
alcohol_mean = mean(alcohol),
alcohol_sd = sd(alcohol)
)

# View result
combined_wine
```

---

------------------------------------------------------------------------
